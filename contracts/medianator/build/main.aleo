program medianator_ajhfoeiufhofoeuhh14.aleo;



mapping medianator_median:
	key as u8.public;
	value as u64.public;


mapping medianator_oracles_checksum:
	key as u8.public;
	value as u128.public;


mapping medianator_is_oracle:
	key as address.public;
	value as boolean.public;

function medianator_set_is_oracle:
    input r0 as address.private;
    input r1 as boolean.private;
    hash.bhp256 r0 into r2 as u128;
    async medianator_set_is_oracle r0 r2 r1 into r3;
    output r3 as medianator_ajhfoeiufhofoeuhh14.aleo/medianator_set_is_oracle.future;

finalize medianator_set_is_oracle:
    input r0 as address.public;
    input r1 as u128.public;
    input r2 as boolean.public;
    get.or_use medianator_is_oracle[r0] false into r3;
    is.neq r3 r2 into r4;
    assert.eq r4 true;
    set r2 into medianator_is_oracle[r0];
    get.or_use medianator_oracles_checksum[0u8] 0u128 into r5;
    add.w r5 r1 into r6;
    sub.w r5 r1 into r7;
    ternary r2 r6 r7 into r8;
    set r8 into medianator_oracles_checksum[0u8];


function medianator_set_median:
    input r0 as u8.private;
    input r1 as [u64; 16u32].private;
    input r2 as [address; 16u32].private;
    input r3 as [signature; 16u32].private;
    lt 0u8 r0 into r4;
    gte r1[0u32] r1[0u32] into r5;
    not r4 into r6;
    or r6 r5 into r7;
    assert.eq r7 true;
    sign.verify r3[0u32] r2[0u32] r1[0u32] into r8;
    not r4 into r9;
    or r9 r8 into r10;
    assert.eq r10 true;
    hash.bhp256 r2[0u32] into r11 as u128;
    add.w 0u128 r11 into r12;
    div r0 2u8 into r13;
    is.eq 0u8 r13 into r14;
    ternary r14 r1[0u32] 0u64 into r15;
    ternary r4 r12 0u128 into r16;
    ternary r4 r15 0u64 into r17;
    ternary r4 r1[0u32] r1[0u32] into r18;
    lt 1u8 r0 into r19;
    gte r1[1u32] r18 into r20;
    not r19 into r21;
    or r21 r20 into r22;
    assert.eq r22 true;
    sign.verify r3[1u32] r2[1u32] r1[1u32] into r23;
    not r19 into r24;
    or r24 r23 into r25;
    assert.eq r25 true;
    hash.bhp256 r2[1u32] into r26 as u128;
    add.w r16 r26 into r27;
    div r0 2u8 into r28;
    is.eq 1u8 r28 into r29;
    ternary r29 r1[1u32] r17 into r30;
    ternary r19 r27 r16 into r31;
    ternary r19 r30 r17 into r32;
    ternary r19 r1[1u32] r18 into r33;
    lt 2u8 r0 into r34;
    gte r1[2u32] r33 into r35;
    not r34 into r36;
    or r36 r35 into r37;
    assert.eq r37 true;
    sign.verify r3[2u32] r2[2u32] r1[2u32] into r38;
    not r34 into r39;
    or r39 r38 into r40;
    assert.eq r40 true;
    hash.bhp256 r2[2u32] into r41 as u128;
    add.w r31 r41 into r42;
    div r0 2u8 into r43;
    is.eq 2u8 r43 into r44;
    ternary r44 r1[2u32] r32 into r45;
    ternary r34 r42 r31 into r46;
    ternary r34 r45 r32 into r47;
    ternary r34 r1[2u32] r33 into r48;
    lt 3u8 r0 into r49;
    gte r1[3u32] r48 into r50;
    not r49 into r51;
    or r51 r50 into r52;
    assert.eq r52 true;
    sign.verify r3[3u32] r2[3u32] r1[3u32] into r53;
    not r49 into r54;
    or r54 r53 into r55;
    assert.eq r55 true;
    hash.bhp256 r2[3u32] into r56 as u128;
    add.w r46 r56 into r57;
    div r0 2u8 into r58;
    is.eq 3u8 r58 into r59;
    ternary r59 r1[3u32] r47 into r60;
    ternary r49 r57 r46 into r61;
    ternary r49 r60 r47 into r62;
    ternary r49 r1[3u32] r48 into r63;
    lt 4u8 r0 into r64;
    gte r1[4u32] r63 into r65;
    not r64 into r66;
    or r66 r65 into r67;
    assert.eq r67 true;
    sign.verify r3[4u32] r2[4u32] r1[4u32] into r68;
    not r64 into r69;
    or r69 r68 into r70;
    assert.eq r70 true;
    hash.bhp256 r2[4u32] into r71 as u128;
    add.w r61 r71 into r72;
    div r0 2u8 into r73;
    is.eq 4u8 r73 into r74;
    ternary r74 r1[4u32] r62 into r75;
    ternary r64 r72 r61 into r76;
    ternary r64 r75 r62 into r77;
    ternary r64 r1[4u32] r63 into r78;
    lt 5u8 r0 into r79;
    gte r1[5u32] r78 into r80;
    not r79 into r81;
    or r81 r80 into r82;
    assert.eq r82 true;
    sign.verify r3[5u32] r2[5u32] r1[5u32] into r83;
    not r79 into r84;
    or r84 r83 into r85;
    assert.eq r85 true;
    hash.bhp256 r2[5u32] into r86 as u128;
    add.w r76 r86 into r87;
    div r0 2u8 into r88;
    is.eq 5u8 r88 into r89;
    ternary r89 r1[5u32] r77 into r90;
    ternary r79 r87 r76 into r91;
    ternary r79 r90 r77 into r92;
    ternary r79 r1[5u32] r78 into r93;
    lt 6u8 r0 into r94;
    gte r1[6u32] r93 into r95;
    not r94 into r96;
    or r96 r95 into r97;
    assert.eq r97 true;
    sign.verify r3[6u32] r2[6u32] r1[6u32] into r98;
    not r94 into r99;
    or r99 r98 into r100;
    assert.eq r100 true;
    hash.bhp256 r2[6u32] into r101 as u128;
    add.w r91 r101 into r102;
    div r0 2u8 into r103;
    is.eq 6u8 r103 into r104;
    ternary r104 r1[6u32] r92 into r105;
    ternary r94 r102 r91 into r106;
    ternary r94 r105 r92 into r107;
    ternary r94 r1[6u32] r93 into r108;
    lt 7u8 r0 into r109;
    gte r1[7u32] r108 into r110;
    not r109 into r111;
    or r111 r110 into r112;
    assert.eq r112 true;
    sign.verify r3[7u32] r2[7u32] r1[7u32] into r113;
    not r109 into r114;
    or r114 r113 into r115;
    assert.eq r115 true;
    hash.bhp256 r2[7u32] into r116 as u128;
    add.w r106 r116 into r117;
    div r0 2u8 into r118;
    is.eq 7u8 r118 into r119;
    ternary r119 r1[7u32] r107 into r120;
    ternary r109 r117 r106 into r121;
    ternary r109 r120 r107 into r122;
    ternary r109 r1[7u32] r108 into r123;
    lt 8u8 r0 into r124;
    gte r1[8u32] r123 into r125;
    not r124 into r126;
    or r126 r125 into r127;
    assert.eq r127 true;
    sign.verify r3[8u32] r2[8u32] r1[8u32] into r128;
    not r124 into r129;
    or r129 r128 into r130;
    assert.eq r130 true;
    hash.bhp256 r2[8u32] into r131 as u128;
    add.w r121 r131 into r132;
    div r0 2u8 into r133;
    is.eq 8u8 r133 into r134;
    ternary r134 r1[8u32] r122 into r135;
    ternary r124 r132 r121 into r136;
    ternary r124 r135 r122 into r137;
    ternary r124 r1[8u32] r123 into r138;
    lt 9u8 r0 into r139;
    gte r1[9u32] r138 into r140;
    not r139 into r141;
    or r141 r140 into r142;
    assert.eq r142 true;
    sign.verify r3[9u32] r2[9u32] r1[9u32] into r143;
    not r139 into r144;
    or r144 r143 into r145;
    assert.eq r145 true;
    hash.bhp256 r2[9u32] into r146 as u128;
    add.w r136 r146 into r147;
    div r0 2u8 into r148;
    is.eq 9u8 r148 into r149;
    ternary r149 r1[9u32] r137 into r150;
    ternary r139 r147 r136 into r151;
    ternary r139 r150 r137 into r152;
    ternary r139 r1[9u32] r138 into r153;
    lt 10u8 r0 into r154;
    gte r1[10u32] r153 into r155;
    not r154 into r156;
    or r156 r155 into r157;
    assert.eq r157 true;
    sign.verify r3[10u32] r2[10u32] r1[10u32] into r158;
    not r154 into r159;
    or r159 r158 into r160;
    assert.eq r160 true;
    hash.bhp256 r2[10u32] into r161 as u128;
    add.w r151 r161 into r162;
    div r0 2u8 into r163;
    is.eq 10u8 r163 into r164;
    ternary r164 r1[10u32] r152 into r165;
    ternary r154 r162 r151 into r166;
    ternary r154 r165 r152 into r167;
    ternary r154 r1[10u32] r153 into r168;
    lt 11u8 r0 into r169;
    gte r1[11u32] r168 into r170;
    not r169 into r171;
    or r171 r170 into r172;
    assert.eq r172 true;
    sign.verify r3[11u32] r2[11u32] r1[11u32] into r173;
    not r169 into r174;
    or r174 r173 into r175;
    assert.eq r175 true;
    hash.bhp256 r2[11u32] into r176 as u128;
    add.w r166 r176 into r177;
    div r0 2u8 into r178;
    is.eq 11u8 r178 into r179;
    ternary r179 r1[11u32] r167 into r180;
    ternary r169 r177 r166 into r181;
    ternary r169 r180 r167 into r182;
    ternary r169 r1[11u32] r168 into r183;
    lt 12u8 r0 into r184;
    gte r1[12u32] r183 into r185;
    not r184 into r186;
    or r186 r185 into r187;
    assert.eq r187 true;
    sign.verify r3[12u32] r2[12u32] r1[12u32] into r188;
    not r184 into r189;
    or r189 r188 into r190;
    assert.eq r190 true;
    hash.bhp256 r2[12u32] into r191 as u128;
    add.w r181 r191 into r192;
    div r0 2u8 into r193;
    is.eq 12u8 r193 into r194;
    ternary r194 r1[12u32] r182 into r195;
    ternary r184 r192 r181 into r196;
    ternary r184 r195 r182 into r197;
    ternary r184 r1[12u32] r183 into r198;
    lt 13u8 r0 into r199;
    gte r1[13u32] r198 into r200;
    not r199 into r201;
    or r201 r200 into r202;
    assert.eq r202 true;
    sign.verify r3[13u32] r2[13u32] r1[13u32] into r203;
    not r199 into r204;
    or r204 r203 into r205;
    assert.eq r205 true;
    hash.bhp256 r2[13u32] into r206 as u128;
    add.w r196 r206 into r207;
    div r0 2u8 into r208;
    is.eq 13u8 r208 into r209;
    ternary r209 r1[13u32] r197 into r210;
    ternary r199 r207 r196 into r211;
    ternary r199 r210 r197 into r212;
    ternary r199 r1[13u32] r198 into r213;
    lt 14u8 r0 into r214;
    gte r1[14u32] r213 into r215;
    not r214 into r216;
    or r216 r215 into r217;
    assert.eq r217 true;
    sign.verify r3[14u32] r2[14u32] r1[14u32] into r218;
    not r214 into r219;
    or r219 r218 into r220;
    assert.eq r220 true;
    hash.bhp256 r2[14u32] into r221 as u128;
    add.w r211 r221 into r222;
    div r0 2u8 into r223;
    is.eq 14u8 r223 into r224;
    ternary r224 r1[14u32] r212 into r225;
    ternary r214 r222 r211 into r226;
    ternary r214 r225 r212 into r227;
    ternary r214 r1[14u32] r213 into r228;
    lt 15u8 r0 into r229;
    gte r1[15u32] r228 into r230;
    not r229 into r231;
    or r231 r230 into r232;
    assert.eq r232 true;
    sign.verify r3[15u32] r2[15u32] r1[15u32] into r233;
    not r229 into r234;
    or r234 r233 into r235;
    assert.eq r235 true;
    hash.bhp256 r2[15u32] into r236 as u128;
    add.w r226 r236 into r237;
    div r0 2u8 into r238;
    is.eq 15u8 r238 into r239;
    ternary r239 r1[15u32] r227 into r240;
    ternary r229 r237 r226 into r241;
    ternary r229 r240 r227 into r242;
    ternary r229 r1[15u32] r228 into r243;
    gt r242 0u64 into r244;
    assert.eq r244 true;
    gt r241 0u128 into r245;
    assert.eq r245 true;
    async medianator_set_median r242 r241 into r246;
    output r246 as medianator_ajhfoeiufhofoeuhh14.aleo/medianator_set_median.future;

finalize medianator_set_median:
    input r0 as u64.public;
    input r1 as u128.public;
    get medianator_oracles_checksum[0u8] into r2;
    is.eq r1 r2 into r3;
    assert.eq r3 true;
    set r0 into medianator_median[0u8];


function medianator_assert_correct_price:
    input r0 as u64.private;
    async medianator_assert_correct_price r0 into r1;
    output r1 as medianator_ajhfoeiufhofoeuhh14.aleo/medianator_assert_correct_price.future;

finalize medianator_assert_correct_price:
    input r0 as u64.public;
    get medianator_median[0u8] into r1;
    is.eq r0 r1 into r2;
    assert.eq r2 true;
